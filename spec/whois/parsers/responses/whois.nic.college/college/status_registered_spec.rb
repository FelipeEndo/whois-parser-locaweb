# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.nic.college/college/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'

describe "whois.nic.college", :aggregate_failures do

  subject do
    file = fixture("responses", "whois.nic.college/college/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file), host: "whois.nic.college")
    Whois::Parser.parser_for(part)
  end

  it "matches status_registered.expected" do
    expect(subject.disclaimer).to eq("Access to the whois service is rate limited. For more information, please see https://registrar-console.centralnic.com/pub/whois_guidance.")
    expect(subject.domain).to eq("nic.college")
    expect(subject.domain_id).to eq("D1465621-CNIC")
    expect(subject.status).to eq(["serverTransferProhibited", "serverUpdateProhibited", "serverDeleteProhibited", "serverRenewProhibited"])
    expect(subject.available?).to eq(false)
    expect(subject.registered?).to eq(true)
    expect(subject.created_on).to be_a(Time)
    expect(subject.created_on).to eq(DateTime.parse("2013-09-11 00:00:00 UTC"))
    expect(subject.updated_on).to be_a(Time)
    expect(subject.updated_on).to eq(DateTime.parse("2014-09-12 00:15:47 UTC"))
    expect(subject.expires_on).to be_a(Time)
    expect(subject.expires_on).to eq(DateTime.parse("2015-09-11 23:59:59 UTC"))
    expect(subject.registrar).to be_a(Whois::Parser::Registrar)
    expect(subject.registrar.id).to eq("9999")
    expect(subject.registrar.name).to eq("CentralNic Ltd")
    expect(subject.registrar.url).to eq(nil)
    expect(subject.registrant_contacts).to be_a(Array)
    expect(subject.registrant_contacts.size).to eq(1)
    expect(subject.registrant_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.registrant_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_REGISTRANT)
    expect(subject.registrant_contacts[0].id).to eq("H5178905")
    expect(subject.registrant_contacts[0].name).to eq("Domain Administrator")
    expect(subject.registrant_contacts[0].organization).to eq("XYZ.COM LLC")
    expect(subject.registrant_contacts[0].address).to eq("2121 E Tropicana Ave Suite #2")
    expect(subject.registrant_contacts[0].city).to eq("Las Vegas")
    expect(subject.registrant_contacts[0].zip).to eq("89119")
    expect(subject.registrant_contacts[0].state).to eq("NV")
    expect(subject.registrant_contacts[0].country).to eq(nil)
    expect(subject.registrant_contacts[0].country_code).to eq("US")
    expect(subject.registrant_contacts[0].phone).to eq("+1.8009998422")
    expect(subject.registrant_contacts[0].fax).to eq("+1.7023578299")
    expect(subject.registrant_contacts[0].email).to eq("icann@xyz.com")
    expect(subject.admin_contacts).to be_a(Array)
    expect(subject.admin_contacts.size).to eq(1)
    expect(subject.admin_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.admin_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_ADMINISTRATIVE)
    expect(subject.admin_contacts[0].id).to eq("H5178905")
    expect(subject.admin_contacts[0].name).to eq("Domain Administrator")
    expect(subject.admin_contacts[0].organization).to eq("XYZ.COM LLC")
    expect(subject.admin_contacts[0].address).to eq("2121 E Tropicana Ave Suite #2")
    expect(subject.admin_contacts[0].city).to eq("Las Vegas")
    expect(subject.admin_contacts[0].zip).to eq("89119")
    expect(subject.admin_contacts[0].state).to eq("NV")
    expect(subject.admin_contacts[0].country).to eq(nil)
    expect(subject.admin_contacts[0].country_code).to eq("US")
    expect(subject.admin_contacts[0].phone).to eq("+1.8009998422")
    expect(subject.admin_contacts[0].fax).to eq("+1.7023578299")
    expect(subject.admin_contacts[0].email).to eq("icann@xyz.com")
    expect(subject.technical_contacts).to be_a(Array)
    expect(subject.technical_contacts.size).to eq(1)
    expect(subject.technical_contacts[0]).to be_a(Whois::Parser::Contact)
    expect(subject.technical_contacts[0].type).to eq(Whois::Parser::Contact::TYPE_TECHNICAL)
    expect(subject.technical_contacts[0].id).to eq("H5178905")
    expect(subject.technical_contacts[0].name).to eq("Domain Administrator")
    expect(subject.technical_contacts[0].organization).to eq("XYZ.COM LLC")
    expect(subject.technical_contacts[0].address).to eq("2121 E Tropicana Ave Suite #2")
    expect(subject.technical_contacts[0].city).to eq("Las Vegas")
    expect(subject.technical_contacts[0].zip).to eq("89119")
    expect(subject.technical_contacts[0].state).to eq("NV")
    expect(subject.technical_contacts[0].country).to eq(nil)
    expect(subject.technical_contacts[0].country_code).to eq("US")
    expect(subject.technical_contacts[0].phone).to eq("+1.8009998422")
    expect(subject.technical_contacts[0].fax).to eq("+1.7023578299")
    expect(subject.technical_contacts[0].email).to eq("icann@xyz.com")
    expect(subject.nameservers).to be_a(Array)
    expect(subject.nameservers.size).to eq(6)
    expect(subject.nameservers[0]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[0].name).to eq("ns0.centralnic-dns.com")
    expect(subject.nameservers[0].ipv4).to eq(nil)
    expect(subject.nameservers[0].ipv6).to eq(nil)
    expect(subject.nameservers[1]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[1].name).to eq("ns1.centralnic-dns.com")
    expect(subject.nameservers[1].ipv4).to eq(nil)
    expect(subject.nameservers[1].ipv6).to eq(nil)
    expect(subject.nameservers[2]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[2].name).to eq("ns2.centralnic-dns.com")
    expect(subject.nameservers[2].ipv4).to eq(nil)
    expect(subject.nameservers[2].ipv6).to eq(nil)
    expect(subject.nameservers[3]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[3].name).to eq("ns3.centralnic-dns.com")
    expect(subject.nameservers[3].ipv4).to eq(nil)
    expect(subject.nameservers[3].ipv6).to eq(nil)
    expect(subject.nameservers[4]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[4].name).to eq("ns4.centralnic-dns.com")
    expect(subject.nameservers[4].ipv4).to eq(nil)
    expect(subject.nameservers[4].ipv6).to eq(nil)
    expect(subject.nameservers[5]).to be_a(Whois::Parser::Nameserver)
    expect(subject.nameservers[5].name).to eq("ns5.centralnic-dns.com")
    expect(subject.nameservers[5].ipv4).to eq(nil)
    expect(subject.nameservers[5].ipv6).to eq(nil)
  end
end
